summarise(missing=sum(missing))
View(image %>%
mutate(missing=Number.of.Missing.Image.Issues=="NULL")%>%
group_by(Year) %>%
summarise(missing=sum(missing)))
imageNoNullByDate <- image %>%
filter(Number.of.Missing.Image.Issues!="NULL") %>%
group_by(Week, Year) %>%
summarize(avgImageIssues=mean(Number.of.Missing.Image.Issues)) %>%
right_join(image, by=c("Week", "Year"))
imageNoNullByDate <- image %>%
filter(Number.of.Missing.Image.Issues!="NULL") %>%
group_by(Week, Year) %>%
summarize(avgImageIssues=mean(as.numeric(Number.of.Missing.Image.Issues))) %>%
right_join(image, by=c("Week", "Year"))
ggplot(imageNoNullByDate, aes(x=Date2, y=avgImageIssues)) +
geom_point()
imagePlot<-ggplot(imageNoNullByDate, aes(x=Date2, y=avgImageIssues)) +
geom_point()
imagePlote
imagePlot
imagePlot<-ggplot(image %>% filter(Number.of.Missing.Image.Issues!="NULL"),
aes(x=Date2, y=as.numeric(Number.of.Missing.Image.Issues))) +
geom_jitter()
imagePlot
wdsMonth <- wds %>%
mutate(monthYear = floor_date(Date2))
head(wdsMonth)
wdsMonth <- wds %>%
mutate(monthYear = floor_date(Date2, unit="month"))
head(wdsMonth)
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month"))
ggplot(wdsMonth, aes(x=monthYear, color=factor(USWDS.Score))) +
geom_line()
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(monthYear, as.factor(USWDS.Score)) %>%
summarise(Count = n())
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=factor(USWDS.Score))) +
geom_line()
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(USWDS.Score))) +
geom_line()
View(wdsMonth)
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score))) %>%
ungroup() %>%
group_by(monthYear, as.factor(maxUSWDS)) %>%
summarise(Count = n())
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score)))
names(wds)
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(Website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score))) %>%
ungroup() %>%
group_by(monthYear, as.factor(maxUSWDS)) %>%
summarise(Count = n())
View(wdsMonth)
View(wdsMonth)
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(Website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score))) %>%
ungroup() %>%
group_by(monthYear, maxUSWDS) %>%
summarise(Count = n())
names(wdsMonth)
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line()
View(wdsMonth)
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(monthYear = floor_date(Date2, unit="month")) %>%
group_by(Website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score))) %>%
ungroup() %>%
group_by(monthYear, maxUSWDS) %>%
summarise(Count = n()) %>%
ungroup() %>%
filter(Count>1)
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line()
# show percent uswds adoption over time
adoptionByWeek <- wds %>%
filter(USWDS.Score!="NULL") %>%
mutate(YearWeek=paste0(Year, Week)) %>%
group_by(YearWeek) %>%
summarise(Adoption=mean(as.numeric(USWDS.Score)))
ggplot(adoptionByWeek, aes(x=YearWeek, y=Adoption)) +
geom_point()
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line()
ggplot(adoptionByWeek, aes(x=YearWeek, y=Adoption)) +
geom_point()
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,100)
getwd(0)
getwd()
setwd("G://Shared drives//MSG Projects//3.0 Digital Government (LQ3)//2233 USWDS DiD//")
getwd()
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,100)
ggsave("uswdsSitesOverTime.png", device = "png")
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60)
colSums(goo=="NULL")
naCount <- sapply(goo, function(y) sum(y=="NULL"))
naCount <- apply(goo, function(y) sum(y=="NULL"))
naCount <- apply(goo, function(y) is.na(y))
htmlNullCount <- goo$Number.of.HTML.Aattribute.issues=="NULL"
imageNullCount <- goo$Number.of.Missing.Image.Issues=="NULL"
colorNullCount <- goo$ContrastIssues=="NULL"
htmlNullCount <- sum(goo$Number.of.HTML.Aattribute.issues=="NULL")
imageNullCount <- sum(goo$Number.of.Missing.Image.Issues=="NULL")
colorNullCount <- sum(goo$ContrastIssues=="NULL")
htmlNullCount
colorNullCount
# about 1/3 of observations are coerced to NA, will need to
# take a closer look at values before deciding that is okay
# or if should be zero. Looks like all that are coerced to
# N/A have value "NULL" but there are also 0s in the data
summary(color)
# need to convert date to date type
color <- read.csv(paste0(filepath, colorName)) %>%
rename(ContrastIssues=Number.of.Color.Contrast.Issues) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
# ContrastIssues=as.numeric(ContrastIssues),
Week=week(Date2),
Year=year(Date2)) %>%
distinct(Website, Week, Year, ContrastIssues, .keep_all=TRUE)
View(color%>%arrange(website,Year,Week))
View(color%>%arrange(Website,Year,Week))
html <- read.csv(paste0(filepath, htmlName))%>%
rename(Website=Website.Name) %>%
mutate(Date2=as_date(date, format="%d-%b-%y"),
Week=week(Date2),
Year=year(Date2)) %>%
# distinct(Website, Date2, Number.of.HTML.Aattribute.issues, .keep_all=TRUE)
distinct(Website, Week, Year, Number.of.HTML.Aattribute.issues, .keep_all=TRUE)
View(html%>%arrange(Website,Year,Week))
html%>%group_by(Year,Week)%>%summarise(count=n())
View(html%>%group_by(Year,Week)%>%summarise(count=n()))
View(color%>%group_by(Year,Week)%>%summarise(count=n()))
View(image%>%group_by(Year,Week)%>%summarise(count=n()))
View(wds%>%group_by(Year,Week)%>%summarise(count=n()))
# there are a lot of non-matches, creating 58437 obsrvations
# after join compared to about 32000 before
accessibility <- color %>%
left_join(html, by=c("Website", "Date2")) %>%
left_join(image, by=c("Website", "Date2")) %>%
left_join(wds, by=c("Website", "Date2"))
View(head(accessibility))
# there are a lot of non-matches, creating 58437 obsrvations
# after join compared to about 32000 before
accessibility <- color %>%
left_join(html, by=c("Website", "Date2"), suffix="html") %>%
left_join(image, by=c("Website", "Date2"), suffix="image") %>%
left_join(wds, by=c("Website", "Date2"), suffix="wds")
# there are a lot of non-matches, creating 58437 obsrvations
# after join compared to about 32000 before
accessibility <- color %>%
left_join(html, by=c("Website", "Date2"), suffix=c("color","html")) %>%
left_join(image, by=c("Website", "Date2"), suffix=c("color","image")) %>%
left_join(wds, by=c("Website", "Date2"), suffix=c("color","wds"))
View(head(accessibility))
names(color)
names(html)
names(image)
names(wds)
imageDups <- getDups(image)
imageDups %>% group_by(Week, Year) %>% summarise(count = n())
dim(imageDups)
imageDups
View(image%>%filter(Website%in%imageDups$Website, Year==2020, Week==7))
View(image %>%
mutate(missing=Number.of.Missing.Image.Issues=="NULL")%>%
group_by(Year) %>%
summarise(missing=sum(missing)))
dim(color)
dim(html)
dim(image)
# mostly a good match on the accessibility factors at the week level
accessibility <- color %>%
left_join(html, by=c("Website", "Week", "Year"), suffix=c("_color","_html")) %>%
left_join(image, by=c("Website", "Week", "Year"), suffix=c("_color","_image")) %>%
left_join(wds, by=c("Website", "Week", "Year"), suffix=c("_color","_wds"))
dim(accessibility)
View(accessibility[1:500,] %>% arrange(Website,Year,week()))
View(accessibility[1:500,] %>% arrange(Website,Year,week))
View(accessibility[1:500,] %>% arrange(Website,Year,Week))
names(color)
color%>%filter(ContrastIssues=="NULL")%>%group_by(Year,Week)%>%summarise(Count=n())
View(color%>%filter(ContrastIssues=="NULL")%>%group_by(Year,Week)%>%summarise(Count=n()))
View(color%>%group_by(Year,Week)%>%summarise(Count=n(),Nulls=sum(ContrastIssues=="NULL")))
View(color%>%group_by(Year,Week)%>%summarise(Count=n(),Nulls=sum(ContrastIssues=="NULL"), pct=Nulls/Count))
imagePlot
names(accessibility)
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues")
View(accessibilityLong[1:100,])
names(accessibilityLong)
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues") %>%
group_by(Year, Week, ScanType) %>%
summarise(MeanIssues=mean(Issues, na.rm=TRUE))
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues") %>%
filter(Issues!="NULL") %>%
group_by(Year, Week, ScanType) %>%
summarise(MeanIssues=mean(as.numeric(Issues), na.rm=TRUE))
issuePlot<-ggplot(accessibilityLong,
aes(x=Date2, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues") %>%
filter(Issues!="NULL") %>%
group_by(Year, Week, ScanType) %>%
summarise(MeanIssues=mean(as.numeric(Issues), na.rm=TRUE)) %>%
ungroup() %>%
mutate(YearWeek=paste0(Year,Week))
issuePlot<-ggplot(accessibilityLong,
aes(x=YearWeek, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(Year %in% c("2017","2018","2019","2020")),
aes(x=YearWeek, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(Year %in% c("2018","2019","2020")),
aes(x=YearWeek, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
# need to convert date to date type.
# There is a gap in scans between Nov 19,
# 2020 and March 6, 2022
color <- read.csv(paste0(filepath, colorName)) %>%
rename(ContrastIssues=Number.of.Color.Contrast.Issues) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
# ContrastIssues=as.numeric(ContrastIssues),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month"),
Week=week(Date2),
Year=year(Date2)) %>%
distinct(Website, weekYear, ContrastIssues, .keep_all=TRUE)
table(color$weekYear, color$Year, useNA = 'always')
html <- read.csv(paste0(filepath, htmlName))%>%
rename(Website=Website.Name, Date=date, HTMLIssues=Number.of.HTML.Aattribute.issues) %>%
mutate(Date2=as_date(date, format="%d-%b-%y"),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month")) %>%
# distinct(Website, Date2, Number.of.HTML.Aattribute.issues, .keep_all=TRUE)
distinct(Website, weekYear, HTMLIssues, .keep_all=TRUE)
html <- read.csv(paste0(filepath, htmlName))%>%
rename(Website=Website.Name, Date=date, HTMLIssues=Number.of.HTML.Aattribute.issues) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month")) %>%
# distinct(Website, Date2, Number.of.HTML.Aattribute.issues, .keep_all=TRUE)
distinct(Website, weekYear, HTMLIssues, .keep_all=TRUE)
names(html)
# check if scans on same week are duplicate observations
getDups <- function(df) {
dups <- df %>%
group_by(Website, weekYear) %>%
summarise(count=n()) %>%
filter(count>1)
return(dups)
}
htmlDups <- getDups(html)
htmlDups <- getDups(html)
htmlDups %>% group_by(weekYear) %>% summarise(count = n())
htmlDups
image <- read.csv(paste0(filepath, imageName))%>%
rename(Website=Website.Name, ImageIssues=Number.of.Missing.Image.Issues) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month")) %>%
distinct(Website, Week, Year, ImageIssues, .keep_all=TRUE)
image <- read.csv(paste0(filepath, imageName))%>%
rename(Website=Website.Name, ImageIssues=Number.of.Missing.Image.Issues) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month")) %>%
distinct(Website, weekYear, ImageIssues, .keep_all=TRUE)
# still a few duplicates in the week that have different values
# one way to treat could be to take the mean or the min/max
imageDups <- getDups(image)
# still a few duplicates in the week that have different values
# one way to treat could be to take the mean or the min/max
imageDups <- getDups(image)
imageDups %>% group_by(weekYear) %>% summarise(count = n())
# wds scan starts in 25th week of 2020, so far fewer observations, only 52 weeks
# also only 99 websites scanned instead of 1112 for others
# maybe the correct order here is to use the 99 websites to join the accessibility
# scores, but for wds set the value to 0 for any obs prior to when the scans started
# although that may not be entirely accurate, or just have to restrict to those 52
# weeks
wds <- read.csv(paste0(filepath, wdsName))%>%
rename(Website=Website.Name) %>%
mutate(Date2=as_date(Date, format="%d-%b-%y"),
weekYear = floor_date(Date2, unit="week"),
monthYear = floor_date(Date2, unit="month")) %>%
distinct(Website, weekYear, USWDS.Score, .keep_all=TRUE)
# could find indicator for any USWDS.Score==100 and earliest date, merge that back and see if
# there are any obs that are 0 or NULL after that Week, Year (logical)
wdsDups <- getDups(wds)
wdsDups %>% group_by(weekYear) %>% summarise(count = n())
View(wdsDups %>%
left_join(wds, by=c("Website", "weekYear")) %>%
arrange(Website, weekYear))
# check if scans on same week are duplicate observations
getDups <- function(df) {
dups <- df %>%
group_by(Website, weekYear) %>%
summarise(count=n()) %>%
filter(count>1)
return(dups)
}
# could find indicator for any USWDS.Score==100 and earliest date, merge that back and see if
# there are any obs that are 0 or NULL after that Week, Year (logical)
wdsDups <- getDups(wds)
wdsDups %>% group_by(weekYear) %>% summarise(count = n())
View(wdsDups %>%
left_join(wds, by=c("Website", "weekYear")) %>%
arrange(Website, weekYear))
View(wds %>%
filter(Website %in% c("fedidcard.gov", "fsd.gov", "sftool.gov")) %>%
arrange(Website,Date2))
View(wdsDups %>%
left_join(wds, by=c("Website", "Week", "Year")) %>%
group_by(Date2, USWDS.Score) %>%
summarize(Count=n()))
View(wdsDups %>%
left_join(wds, by=c("Website", "weekYear")) %>%
group_by(Date2, USWDS.Score) %>%
summarize(Count=n()))
# checking to see if there are any scans after the first appearance
# of USWDS that then show a 0 value
wdsMin <- wds %>%
filter(USWDS.Score==100) %>%
group_by(Website) %>%
summarize(wdsMin = min(Date2))
wdsSwitch <- wds %>%
left_join(wdsMin, by="Website") %>%
mutate(revert = if_else(Date2>wdsMin & USWDS.Score != 100, 1, 0))
View(wdsSwitch %>%
group_by(Website, revert) %>%
summarize(count = n()) %>%
arrange(Website))
# look at those that have >=8 obs that USWDS.Score==0 after at least one ==100
# think about forcing them to 100 after that date? or drop? maybe sensitivity
# analysis for dropping first then including with forced 100 and caveating?
View(wds %>%
filter(Website %in% c("challenge.gov", "ecpic.gov", "fedidcard.gov",
"fleet.gov", "fpc.gov")) %>%
arrange(Website, Date2))
# mostly a good match on the accessibility factors at the week level
accessibility <- color %>%
left_join(html, by=c("Website", "weekYear"), suffix=c("_color","_html")) %>%
left_join(image, by=c("Website", "weekYear"), suffix=c("_color","_image")) %>%
left_join(wds, by=c("Website", "weekYear"), suffix=c("_color","_wds"))
wdsMonth <- wds %>%
filter(USWDS.Score!="NULL") %>%
group_by(Website, monthYear) %>%
summarise(maxUSWDS = max(as.numeric(USWDS.Score))) %>%
ungroup() %>%
group_by(monthYear, maxUSWDS) %>%
summarise(Count = n()) %>%
ungroup() %>%
filter(Count>1)
ggplot(wdsMonth, aes(x=monthYear, y=Count, color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60)
# show percent uswds adoption over time
adoptionByWeek <- wds %>%
filter(USWDS.Score!="NULL") %>%
group_by(weekYear) %>%
summarise(Adoption=mean(as.numeric(USWDS.Score)))
ggplot(adoptionByWeek, aes(x=weekYear, y=Adoption)) +
geom_point()
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues") %>%
filter(Issues!="NULL") %>%
group_by(weekYear, ScanType) %>%
summarise(MeanIssues=mean(as.numeric(Issues), na.rm=TRUE)) %>%
issuePlot<-ggplot(accessibilityLong %>% filter(Year %in% c("2018","2019","2020")),
aes(x=YearWeek, y=MeanIssues, color=ScanType)) +
geom_jitter()
# facet avg number of accessibility issues over time
# will need some transformation to put score type as column
accessibilityLong <- accessibility %>%
pivot_longer(cols=contains("ssues"), names_to = "ScanType", values_to = "Issues") %>%
filter(Issues!="NULL") %>%
group_by(weekYear, ScanType) %>%
summarise(MeanIssues=mean(as.numeric(Issues), na.rm=TRUE))
issuePlot<-ggplot(accessibilityLong %>% filter(Year %in% c("2018","2019","2020")),
aes(x=YearWeek, y=MeanIssues, color=ScanType)) +
geom_jitter()
head(accessibility)
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear %in% c("2018","2019","2020")),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(Year %in% c("2018","2019","2020")),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter()
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
labs(title="Average number of accessibility issues over time",
xlab="Date", ylab="Average # of issues")
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
labs(title="Average number of accessibility issues over time",
x="Date", y="Average # of issues", color="Scan type")
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
labs(title="Average number of accessibility issues over time",
x="Date", y="Average # of issues", color="Scan type") +
scale_color_discrete(values=c("Contrast", "HTML", "Image"))
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
labs(title="Average number of accessibility issues over time",
x="Date", y="Average # of issues", color="Scan type") +
scale_color_discrete(labels=c("Contrast", "HTML", "Image"))
issuePlot
ggsave("accessibilityIssuesOverTime.png", device = "png")
ggplot(wdsMonth, aes(x=monthYear, y=Count,
color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60)
ggplot(wdsMonth, aes(x=monthYear, y=Count,
color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60) +
labs(title="USWDS use over time", x="Date",
y="Number of websites", color = "Uses USWDS") +
scale_discrete_manual(values = c("No", "Yes"))
ggplot(wdsMonth, aes(x=monthYear, y=Count,
color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60) +
labs(title="USWDS use over time", x="Date",
y="Number of websites", color = "Uses USWDS") +
scale_color_discrete(values = c("No", "Yes"))
ggplot(wdsMonth, aes(x=monthYear, y=Count,
color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60) +
labs(title="USWDS use over time", x="Date",
y="Number of websites", color = "Uses USWDS") +
scale_color_discrete(labels = c("No", "Yes"))
ggplot(wdsMonth, aes(x=monthYear, y=Count,
color=as.factor(maxUSWDS))) +
geom_line() +
ylim(30,60) +
labs(title="USWDS use over time", x="Date",
y="Number of websites", color = "USWDS Present") +
scale_color_discrete(labels = c("No", "Yes"))
ggsave("uswdsSitesOverTime.png", device = "png")
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
ylim(0,40) +
labs(title="Average number of accessibility issues over time",
x="Date", y="Average # of issues", color="Scan type") +
scale_color_discrete(labels=c("Contrast", "HTML", "Image"))
issuePlot
issuePlot<-ggplot(accessibilityLong %>% filter(weekYear<"2022-01-01"),
aes(x=weekYear, y=MeanIssues, color=ScanType)) +
geom_jitter() +
ylim(0,30) +
labs(title="Average number of accessibility issues over time",
x="Date", y="Average # of issues", color="Scan type") +
scale_color_discrete(labels=c("Contrast", "HTML", "Image"))
issuePlot
ggsave("accessibilityIssuesOverTime.png", device = "png")
